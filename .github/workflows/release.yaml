name: Release

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel release builds

permissions:
  contents: write
  packages: write

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          GIT_COMMIT=${GITHUB_SHA::8}
          
          LDFLAGS="-w -s"
          LDFLAGS="$LDFLAGS -X main.Version=$VERSION"
          LDFLAGS="$LDFLAGS -X main.BuildTime=$BUILD_TIME"
          LDFLAGS="$LDFLAGS -X main.GitCommit=$GIT_COMMIT"
          
          BINARY_NAME="cloud-memstore-proxy-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          go build -ldflags="$LDFLAGS" -o "$BINARY_NAME" main.go
          
          # Create tarball for non-Windows
          if [ "${{ matrix.goos }}" != "windows" ]; then
            tar czf "${BINARY_NAME}.tar.gz" "$BINARY_NAME"
            echo "ASSET=${BINARY_NAME}.tar.gz" >> $GITHUB_ENV
          else
            zip "${BINARY_NAME}.zip" "$BINARY_NAME"
            echo "ASSET=${BINARY_NAME}.zip" >> $GITHUB_ENV
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cloud-memstore-proxy-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ env.ASSET }}

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: [build-binaries, build-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure
        run: ls -R artifacts/

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: notes
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          cat > release_notes.md << EOF
          ## Cloud Memstore Proxy ${VERSION}
          
          ### Installation
          
          #### Docker
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:${VERSION}
          \`\`\`
          
          #### Binary
          Download the appropriate binary for your platform from the assets below.
          
          ### Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
          ### Docker Image
          - \`ghcr.io/${{ github.repository }}:${VERSION}\`
          - \`ghcr.io/${{ github.repository }}:latest\`
          
          Multi-architecture support: \`linux/amd64\`, \`linux/arm64\`
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

